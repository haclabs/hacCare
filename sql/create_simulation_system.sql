-- Simulation System Database Schema for hacCare
-- Integrates with existing patients, tenants, and auth.users tables
-- This creates all tables needed for the simulation scenario system

-- 1. Scenario Templates Table - stores reusable simulation scenarios
CREATE TABLE IF NOT EXISTS public.scenario_templates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    learning_objectives TEXT[],
    difficulty_level VARCHAR(20) CHECK (difficulty_level IN ('beginner', 'intermediate', 'advanced')),
    estimated_duration_minutes INTEGER,
    created_by UUID NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true,
    tags TEXT[] -- For categorization (cardiology, emergency, pediatrics, etc.)
);

-- 2. Active Simulations Table - running instances of templates
CREATE TABLE IF NOT EXISTS public.active_simulations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    scenario_template_id UUID NOT NULL REFERENCES scenario_templates(id) ON DELETE CASCADE,
    tenant_id UUID NOT NULL,
    session_name VARCHAR(255) NOT NULL,
    instructor_id UUID NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    end_time TIMESTAMP WITH TIME ZONE,
    status VARCHAR(20) DEFAULT 'running' CHECK (status IN ('running', 'paused', 'completed', 'reset')),
    student_ids UUID[], -- Array of student user IDs
    simulation_notes TEXT,
    simulation_token VARCHAR(255) UNIQUE NOT NULL, -- Unique simulation token for sharing (generated by application)
    allow_anonymous_access BOOLEAN DEFAULT true, -- Allow access without login
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Simulation Patients Table - template and live simulation patients
CREATE TABLE IF NOT EXISTS public.simulation_patients (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    scenario_template_id UUID REFERENCES scenario_templates(id) ON DELETE CASCADE,
    active_simulation_id UUID REFERENCES active_simulations(id) ON DELETE CASCADE,
    patient_name VARCHAR(255) NOT NULL,
    patient_id VARCHAR(50) NOT NULL, -- PT001, PT002, etc. (matches your existing pattern)
    date_of_birth DATE NOT NULL,
    gender VARCHAR(20),
    room_number VARCHAR(10),
    bed_number VARCHAR(10),
    admission_date DATE,
    condition VARCHAR(50) DEFAULT 'Stable',
    diagnosis TEXT,
    medical_history TEXT,
    allergies TEXT[],
    blood_type VARCHAR(10),
    emergency_contact_name VARCHAR(255),
    emergency_contact_relationship VARCHAR(100),
    emergency_contact_phone VARCHAR(20),
    assigned_nurse VARCHAR(255),
    chief_complaint TEXT,
    patient_scenario TEXT, -- Specific scenario details for this patient
    is_template BOOLEAN DEFAULT true, -- true = template patient, false = live simulation patient
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Ensure either template OR simulation is set, not both
    CONSTRAINT check_template_or_simulation CHECK (
        (scenario_template_id IS NOT NULL AND active_simulation_id IS NULL) OR
        (scenario_template_id IS NULL AND active_simulation_id IS NOT NULL)
    )
);

-- 4. Simulation Patient Vitals - baseline and live vitals
CREATE TABLE IF NOT EXISTS public.simulation_patient_vitals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    simulation_patient_id UUID NOT NULL REFERENCES simulation_patients(id) ON DELETE CASCADE,
    temperature NUMERIC(4,1),
    blood_pressure_systolic INTEGER,
    blood_pressure_diastolic INTEGER,
    heart_rate INTEGER,
    respiratory_rate INTEGER,
    oxygen_saturation INTEGER,
    recorded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    recorded_by UUID, -- User who recorded (for live simulations)
    notes TEXT,
    is_baseline BOOLEAN DEFAULT true, -- True for initial template values
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. Simulation Patient Medications - template and administered medications
CREATE TABLE IF NOT EXISTS public.simulation_patient_medications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    simulation_patient_id UUID NOT NULL REFERENCES simulation_patients(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(50) DEFAULT 'scheduled',
    dosage VARCHAR(100) NOT NULL,
    route VARCHAR(50) NOT NULL,
    frequency VARCHAR(100) NOT NULL,
    admin_time VARCHAR(5) DEFAULT '08:00',
    start_date DATE NOT NULL,
    end_date DATE,
    prescribed_by VARCHAR(255) NOT NULL,
    status VARCHAR(20) DEFAULT 'Active',
    special_instructions TEXT,
    is_template BOOLEAN DEFAULT true, -- True for template meds, false for live simulation changes
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 6. Simulation Medication Administrations - track what students give during simulation
CREATE TABLE IF NOT EXISTS public.simulation_medication_administrations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    simulation_patient_id UUID NOT NULL REFERENCES simulation_patients(id) ON DELETE CASCADE,
    medication_id UUID REFERENCES simulation_patient_medications(id),
    medication_name VARCHAR(255) NOT NULL,
    dosage VARCHAR(100),
    route VARCHAR(50),
    administered_by UUID NOT NULL, -- Student user ID
    administered_by_name VARCHAR(255),
    administered_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    notes TEXT,
    status VARCHAR(20) DEFAULT 'completed' CHECK (status IN ('completed', 'missed', 'late', 'partial')),
    instructor_verified BOOLEAN DEFAULT false,
    verification_notes TEXT
);

-- 7. Simulation Patient Notes - assessments and notes during simulation
CREATE TABLE IF NOT EXISTS public.simulation_patient_notes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    simulation_patient_id UUID NOT NULL REFERENCES simulation_patients(id) ON DELETE CASCADE,
    created_by UUID NOT NULL, -- Student or instructor user ID
    created_by_name VARCHAR(255),
    type VARCHAR(50) DEFAULT 'General' CHECK (type IN ('Assessment', 'Medication', 'Vital Signs', 'General', 'Incident')),
    content TEXT NOT NULL,
    priority VARCHAR(20) DEFAULT 'Medium' CHECK (priority IN ('Low', 'Medium', 'High', 'Critical')),
    is_template BOOLEAN DEFAULT true, -- True for template notes, false for live simulation notes
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 8. Simulation Events Log - comprehensive tracking of simulation activities
CREATE TABLE IF NOT EXISTS public.simulation_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    active_simulation_id UUID NOT NULL REFERENCES active_simulations(id) ON DELETE CASCADE,
    event_type VARCHAR(50) NOT NULL, -- 'vital_recorded', 'medication_given', 'assessment_completed', 'patient_viewed', etc.
    event_data JSONB,
    student_id UUID,
    student_name VARCHAR(255),
    patient_id UUID,
    patient_name VARCHAR(255),
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    notes TEXT,
    instructor_feedback TEXT,
    score INTEGER -- Optional scoring for events
);

-- 9. Simulation Assessments - track student performance during simulations
CREATE TABLE IF NOT EXISTS public.simulation_assessments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    active_simulation_id UUID NOT NULL REFERENCES active_simulations(id) ON DELETE CASCADE,
    student_id UUID NOT NULL,
    student_name VARCHAR(255),
    assessment_type VARCHAR(50) NOT NULL, -- 'vital_signs', 'medication_safety', 'patient_care', 'critical_thinking'
    criteria TEXT NOT NULL,
    score INTEGER NOT NULL CHECK (score >= 0 AND score <= 100),
    feedback TEXT,
    assessed_by UUID NOT NULL, -- Instructor user ID
    assessed_by_name VARCHAR(255),
    assessed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_scenario_templates_tenant_id ON scenario_templates(tenant_id);
CREATE INDEX IF NOT EXISTS idx_scenario_templates_created_by ON scenario_templates(created_by);
CREATE INDEX IF NOT EXISTS idx_scenario_templates_is_active ON scenario_templates(is_active);

CREATE INDEX IF NOT EXISTS idx_active_simulations_tenant_id ON active_simulations(tenant_id);
CREATE INDEX IF NOT EXISTS idx_active_simulations_instructor_id ON active_simulations(instructor_id);
CREATE INDEX IF NOT EXISTS idx_active_simulations_status ON active_simulations(status);
CREATE INDEX IF NOT EXISTS idx_active_simulations_start_time ON active_simulations(start_time);

CREATE INDEX IF NOT EXISTS idx_simulation_patients_scenario_template_id ON simulation_patients(scenario_template_id);
CREATE INDEX IF NOT EXISTS idx_simulation_patients_active_simulation_id ON simulation_patients(active_simulation_id);
CREATE INDEX IF NOT EXISTS idx_simulation_patients_is_template ON simulation_patients(is_template);

CREATE INDEX IF NOT EXISTS idx_simulation_patient_vitals_patient_id ON simulation_patient_vitals(simulation_patient_id);
CREATE INDEX IF NOT EXISTS idx_simulation_patient_vitals_recorded_at ON simulation_patient_vitals(recorded_at);

CREATE INDEX IF NOT EXISTS idx_simulation_patient_medications_patient_id ON simulation_patient_medications(simulation_patient_id);
CREATE INDEX IF NOT EXISTS idx_simulation_patient_medications_is_template ON simulation_patient_medications(is_template);

CREATE INDEX IF NOT EXISTS idx_simulation_events_simulation_id ON simulation_events(active_simulation_id);
CREATE INDEX IF NOT EXISTS idx_simulation_events_event_type ON simulation_events(event_type);
CREATE INDEX IF NOT EXISTS idx_simulation_events_timestamp ON simulation_events(timestamp);
CREATE INDEX IF NOT EXISTS idx_simulation_events_student_id ON simulation_events(student_id);

-- Add foreign key constraints if tables exist
DO $$
BEGIN
    -- Add tenant foreign keys if tenants table exists
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'tenants' AND table_schema = 'public') THEN
        ALTER TABLE scenario_templates ADD CONSTRAINT scenario_templates_tenant_id_fkey 
        FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE;
        
        ALTER TABLE active_simulations ADD CONSTRAINT active_simulations_tenant_id_fkey 
        FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE;
        
        RAISE NOTICE 'Added tenant foreign keys';
    ELSE
        RAISE NOTICE 'Tenants table not found, skipping tenant foreign keys';
    END IF;
    
    -- Add user foreign keys
    ALTER TABLE scenario_templates ADD CONSTRAINT scenario_templates_created_by_fkey 
    FOREIGN KEY (created_by) REFERENCES auth.users(id);
    
    ALTER TABLE active_simulations ADD CONSTRAINT active_simulations_instructor_id_fkey 
    FOREIGN KEY (instructor_id) REFERENCES auth.users(id);
    
    RAISE NOTICE 'Added user foreign keys';
    
EXCEPTION
    WHEN others THEN
        RAISE NOTICE 'Some foreign keys could not be added: %', SQLERRM;
END $$;

-- Enable Row Level Security
ALTER TABLE scenario_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE active_simulations ENABLE ROW LEVEL SECURITY;
ALTER TABLE simulation_patients ENABLE ROW LEVEL SECURITY;
ALTER TABLE simulation_patient_vitals ENABLE ROW LEVEL SECURITY;
ALTER TABLE simulation_patient_medications ENABLE ROW LEVEL SECURITY;
ALTER TABLE simulation_medication_administrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE simulation_patient_notes ENABLE ROW LEVEL SECURITY;
ALTER TABLE simulation_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE simulation_assessments ENABLE ROW LEVEL SECURITY;

-- Create RLS Policies (drop existing ones first to avoid conflicts)
-- Scenario Templates
DROP POLICY IF EXISTS "Users can view scenario templates for their tenant" ON scenario_templates;
DROP POLICY IF EXISTS "Users can manage scenario templates for their tenant" ON scenario_templates;

CREATE POLICY "Users can view scenario templates for their tenant" ON scenario_templates
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Users can manage scenario templates for their tenant" ON scenario_templates
    FOR ALL USING (auth.role() = 'authenticated');

-- Active Simulations
DROP POLICY IF EXISTS "Users can view active simulations for their tenant" ON active_simulations;
DROP POLICY IF EXISTS "Users can manage simulations for their tenant" ON active_simulations;

CREATE POLICY "Users can view active simulations for their tenant" ON active_simulations
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Users can manage simulations for their tenant" ON active_simulations
    FOR ALL USING (auth.role() = 'authenticated');

-- Simulation Patients and related tables
DROP POLICY IF EXISTS "Users can access simulation patients" ON simulation_patients;
DROP POLICY IF EXISTS "Users can access simulation vitals" ON simulation_patient_vitals;
DROP POLICY IF EXISTS "Users can access simulation medications" ON simulation_patient_medications;
DROP POLICY IF EXISTS "Users can access medication administrations" ON simulation_medication_administrations;
DROP POLICY IF EXISTS "Users can access simulation notes" ON simulation_patient_notes;
DROP POLICY IF EXISTS "Users can access simulation events" ON simulation_events;
DROP POLICY IF EXISTS "Users can access simulation assessments" ON simulation_assessments;

CREATE POLICY "Users can access simulation patients" ON simulation_patients
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Users can access simulation vitals" ON simulation_patient_vitals
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Users can access simulation medications" ON simulation_patient_medications
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Users can access medication administrations" ON simulation_medication_administrations
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Users can access simulation notes" ON simulation_patient_notes
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Users can access simulation events" ON simulation_events
    FOR ALL USING (auth.role() = 'authenticated');

CREATE POLICY "Users can access simulation assessments" ON simulation_assessments
    FOR ALL USING (auth.role() = 'authenticated');

-- Add updated_at trigger if function exists
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'update_updated_at_column') THEN
        -- Drop existing trigger first to avoid conflicts
        DROP TRIGGER IF EXISTS trigger_scenario_templates_updated_at ON scenario_templates;
        
        CREATE TRIGGER trigger_scenario_templates_updated_at 
        BEFORE UPDATE ON scenario_templates 
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        
        RAISE NOTICE 'Added updated_at trigger';
    ELSE
        RAISE NOTICE 'update_updated_at_column function not found, skipping trigger';
    END IF;
END $$;

-- Show created tables
SELECT 
    'Simulation tables created successfully' as status,
    table_name,
    (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name AND table_schema = 'public') as column_count
FROM information_schema.tables t
WHERE table_name IN (
    'scenario_templates', 
    'active_simulations', 
    'simulation_patients', 
    'simulation_patient_vitals', 
    'simulation_patient_medications',
    'simulation_medication_administrations',
    'simulation_patient_notes',
    'simulation_events',
    'simulation_assessments'
) 
AND table_schema = 'public'
ORDER BY table_name;