import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { ArrowLeft, Activity, Clock, User, Calendar, Phone, AlertTriangle, FileText, Pill, Stethoscope, Clipboard, Shield, Ban as Bandage } from 'lucide-react';
import { Patient, VitalSigns, Medication, PatientNote } from '../../../types';
import { fetchPatientById, fetchPatientVitals, fetchPatientNotes } from '../../../lib/patientService';
import { fetchPatientMedications } from '../../../lib/medicationService';
import { RecentActivity } from './RecentActivity';
import { MedicationAdministration } from './MedicationAdministration';
import { WoundAssessment } from '../forms/WoundAssessment';
// import { ImageAnnotation } from '../visuals/ImageAnnotation';
import { AdmissionRecordsForm } from '../forms/AdmissionRecordsForm';
import { AdvancedDirectivesForm } from '../forms/AdvancedDirectivesForm';
import { VitalsContent } from '../vitals/VitalsContent';
import { NotesContent } from './NotesContent';

interface PatientDetailProps {
  onShowBracelet?: (patient: Patient) => void;
}

export const PatientDetail: React.FC<PatientDetailProps> = ({ onShowBracelet }) => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const [patient, setPatient] = useState<Patient | null>(null); 
  const [vitals, setVitals] = useState<VitalSigns[]>([]);
  const [medications, setMedications] = useState<Medication[]>([]);
  const [notes, setNotes] = useState<PatientNote[]>([]);
  const [loading, setLoading] = useState(true);
  // Check if we have an initial tab from location state (e.g., from barcode scan)
  const [activeTab, setActiveTab] = useState(
    location.state?.activeTab || 'overview'
  );
  // Get medication category from location state if available
  const initialMedicationCategory = location.state?.medicationCategory || 'scheduled';
  const [showActivity, setShowActivity] = useState(false);
  // State for active sub-tab
  const [activeSubTab, setActiveSubTab] = useState<string>('vitals');
  
  // Helper functions for styling (matching PatientCard)
  const getConditionColor = (condition: Patient['condition']) => {
    switch (condition) {
      case 'Critical': return 'bg-gradient-to-r from-red-100 to-red-200 text-red-800 border-red-300 shadow-red-100';
      case 'Stable': return 'bg-gradient-to-r from-green-100 to-green-200 text-green-800 border-green-300 shadow-green-100';
      case 'Improving': return 'bg-gradient-to-r from-blue-100 to-blue-200 text-blue-800 border-blue-300 shadow-blue-100';
      case 'Discharged': return 'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800 border-gray-300 shadow-gray-100';
      default: return 'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800 border-gray-300 shadow-gray-100';
    }
  };

  const getCardAccent = (condition: Patient['condition']) => {
    switch (condition) {
      case 'Critical': return 'border-l-4 border-l-red-500';
      case 'Stable': return 'border-l-4 border-l-green-500';
      case 'Improving': return 'border-l-4 border-l-blue-500';
      case 'Discharged': return 'border-l-4 border-l-gray-400';
      default: return 'border-l-4 border-l-gray-400';
    }
  };

  const getAvatarColor = (condition: Patient['condition']) => {
    switch (condition) {
      case 'Critical': return 'bg-gradient-to-br from-red-100 to-red-200 text-red-600';
      case 'Stable': return 'bg-gradient-to-br from-green-100 to-green-200 text-green-600';
      case 'Improving': return 'bg-gradient-to-br from-blue-100 to-blue-200 text-blue-600';
      case 'Discharged': return 'bg-gradient-to-br from-gray-100 to-gray-200 text-gray-600';
      default: return 'bg-gradient-to-br from-blue-100 to-blue-200 text-blue-600';
    }
  };

  const totalMedications = medications.filter(med => med.status === 'Active').length;

  useEffect(() => {
    const loadPatientData = async () => {
      if (!id) return;
      
      try {
        setLoading(true);
        const [patientData, vitalsData, medicationsData, notesData] = await Promise.all([
          fetchPatientById(id),
          fetchPatientVitals(id),
          fetchPatientMedications(id),
          fetchPatientNotes(id)
        ]);
        
        setPatient(patientData);
        setVitals(vitalsData);
        setMedications(medicationsData);
        setNotes(notesData);
      } catch (error) {
        console.error('Error loading patient data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadPatientData();
  }, [id]);

  if (loading) { 
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!patient) { 
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">Patient not found</p>
      </div>
    );
  }

  const tabs = [ 
    { id: 'overview', label: 'Overview', icon: User },
    { id: 'medications', label: 'MAR', icon: Pill, count: totalMedications > 0 ? totalMedications : undefined },
    { id: 'assessments', label: 'Assessments', icon: Stethoscope, subTabs: [
      { id: 'vitals', label: 'Vital Signs', icon: Activity },
      { id: 'notes', label: 'Notes', icon: FileText },
      { id: 'wounds', label: 'Wound Care', icon: Bandage }
    ]},
    { id: 'admission', label: 'Admission', icon: Clipboard },
    { id: 'directives', label: 'Directives', icon: Shield }
  ];

  const renderTabContent = () => { 
    switch (activeTab) {
      case 'overview':
        return (
          <div className="space-y-6">
            {/* Patient Header Section - Enhanced like PatientCard */}
            <div className={`bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-lg hover:shadow-xl transition-all duration-300 ${getCardAccent(patient.condition)}`}>
              <div className="flex items-start justify-between mb-6">
                <div className="flex items-center space-x-4">
                  <div className={`p-3 rounded-full shadow-lg ${getAvatarColor(patient.condition)}`}>
                    <User className="h-8 w-8" />
                  </div>
                  <div>
                    <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                      {patient.first_name} {patient.last_name}
                    </h1>
                    <p className="text-lg text-gray-600 dark:text-gray-400 flex items-center space-x-2 mt-1">
                      <span>{new Date().getFullYear() - new Date(patient.date_of_birth).getFullYear()} years old</span>
                      <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                      <span>{patient.gender}</span>
                    </p>
                    <p className="text-sm text-blue-600 dark:text-blue-400 font-mono bg-blue-50 dark:bg-blue-900/30 px-3 py-1 rounded-md mt-2 inline-block">
                      {patient.patient_id}
                    </p>
                  </div>
                </div>
                <div className="flex flex-col items-end space-y-3">
                  <span className={`px-6 py-3 rounded-full text-lg font-semibold border shadow-lg ${getConditionColor(patient.condition)}`}>
                    {patient.condition}
                  </span>
                  {onShowBracelet && (
                    <button
                      onClick={() => onShowBracelet(patient)}
                      className="flex items-center text-blue-600 hover:text-blue-800 hover:bg-blue-50 px-4 py-2 rounded-lg transition-colors border border-blue-200 hover:border-blue-300"
                    >
                      <User className="h-4 w-4 mr-2" />
                      ID Bracelet
                    </button>
                  )}
                </div>
              </div>
            </div>

            {/* Enhanced Cards Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Enhanced Cards Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Patient Information Card */}
              <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-lg hover:shadow-xl transition-all duration-300">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6 flex items-center">
                  <div className="p-2 bg-blue-100 dark:bg-blue-900/50 rounded-lg mr-3">
                    <User className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                  </div>
                  Patient Information
                </h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Patient ID:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{patient.patient_id}</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Date of Birth:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{new Date(patient.date_of_birth).toLocaleDateString()}</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Gender:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{patient.gender}</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Blood Type:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{patient.blood_type}</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Room:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{patient.room_number} - {patient.bed_number}</span>
                  </div>
                </div>
              </div>

              {/* Emergency Contact Card */}
              <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-lg hover:shadow-xl transition-all duration-300">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6 flex items-center">
                  <div className="p-2 bg-green-100 dark:bg-green-900/50 rounded-lg mr-3">
                    <Phone className="h-5 w-5 text-green-600 dark:text-green-400" />
                  </div>
                  Emergency Contact
                </h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Name:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{patient.emergency_contact_name}</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Relationship:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{patient.emergency_contact_relationship}</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Phone:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{patient.emergency_contact_phone}</span>
                  </div>
                </div>
              </div>

              {/* Admission Details Card */}
              <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-lg hover:shadow-xl transition-all duration-300">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6 flex items-center">
                  <div className="p-2 bg-purple-100 dark:bg-purple-900/50 rounded-lg mr-3">
                    <Calendar className="h-5 w-5 text-purple-600 dark:text-purple-400" />
                  </div>
                  Admission Details
                </h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Admission Date:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{new Date(patient.admission_date).toLocaleDateString()}</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Condition:</span>
                    <span className={`px-3 py-1 rounded-full text-sm font-semibold ${getConditionColor(patient.condition)}`}>
                      {patient.condition}
                    </span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Diagnosis:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{patient.diagnosis}</span>
                  </div>
                  <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Assigned Nurse:</span>
                    <span className="text-sm font-semibold text-gray-900 dark:text-gray-100">{patient.assigned_nurse}</span>
                  </div>
                </div>
              </div>

              {/* Allergies Card */}
              <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-lg hover:shadow-xl transition-all duration-300">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-6 flex items-center">
                  <div className="p-2 bg-red-100 dark:bg-red-900/50 rounded-lg mr-3">
                    <AlertTriangle className="h-5 w-5 text-red-600 dark:text-red-400" />
                  </div>
                  Allergies
                </h3>
                <div className="space-y-3">
                  {patient.allergies && patient.allergies.length > 0 ? (
                    <div className="flex flex-wrap gap-2">
                      {patient.allergies.map((allergy, index) => (
                        <span key={index} className="inline-flex items-center px-3 py-2 bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 text-sm font-medium rounded-lg border border-red-200 dark:border-red-800">
                          <AlertTriangle className="h-4 w-4 mr-1" />
                          {allergy}
                        </span>
                      ))}
                    </div>
                  ) : (
                    <div className="p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
                      <span className="text-sm text-green-800 dark:text-green-200 font-medium">No known allergies</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      case 'assessments':
        // Render sub-tabs navigation
        return (
          <div className="space-y-6">
            <div className="border-b border-gray-200 dark:border-gray-700">
              <nav className="-mb-px flex space-x-8 overflow-x-auto">
                {tabs.find(tab => tab.id === 'assessments')?.subTabs?.map(subTab => {
                  const Icon = subTab.icon;
                  return (
                    <button
                      key={subTab.id}
                      onClick={() => setActiveSubTab(subTab.id)}
                      className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap flex items-center ${
                        activeSubTab === subTab.id
                          ? 'border-blue-500 text-blue-600 dark:text-blue-400' 
                          : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600' 
                      }`}
                    >
                      <Icon className="h-4 w-4 mr-2" /> 
                      <span>{subTab.label}</span>
                    </button>
                  );
                })}
              </nav>
            </div>

            {/* Render content based on active sub-tab */}
            {activeSubTab === 'vitals' && (
              <VitalsContent 
                patientId={id!} 
                patientName={`${patient.first_name} ${patient.last_name}`}
                vitals={vitals}
                onVitalsUpdated={(updatedVitals) => setVitals(updatedVitals)}
              />
            )}
            {activeSubTab === 'notes' && (
              <NotesContent
                patientId={id!}
                patientName={`${patient.first_name} ${patient.last_name}`}
                notes={notes}
                onNotesUpdated={(updatedNotes) => setNotes(updatedNotes)}
              />
            )}
            {activeSubTab === 'wounds' && <WoundAssessment patientId={id!} />}
          </div>
        );

      case 'medications': 
        return (
          <MedicationAdministration
            patientId={id!}
            patientName={`${patient.first_name || ''} ${patient.last_name || ''}`.trim()}
            medications={medications}
            initialCategory={initialMedicationCategory}
            onRefresh={async () => {
              try {
                const meds = await fetchPatientMedications(id!);
                setMedications(meds);
              } catch (error) {
                console.error('Error refreshing medications:', error);
              }
            }}
          />
        );

      case 'admission':
        return (
          <AdmissionRecordsForm 
            patientId={id!}
            patientName={`${patient.first_name || ''} ${patient.last_name || ''}`.trim()}
            onClose={() => setActiveTab('overview')}
            onSave={() => setActiveTab('overview')}
          />
        );

      case 'directives':
        return (
          <AdvancedDirectivesForm 
            patientId={id!} 
            patientName={`${patient.first_name || ''} ${patient.last_name || ''}`.trim()}
            onClose={() => setActiveTab('overview')}
            onSave={() => setActiveTab('overview')}
          />
        );

      default:
        return null;
    }
  };

  return ( 
    <div className="space-y-6 pb-12">
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <button
            onClick={() => navigate('/')}
            className="mr-4 p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
          >
            <ArrowLeft className="h-5 w-5" />
          </button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              {patient.first_name} {patient.last_name}
            </h1>
            <p className="text-gray-600 dark:text-gray-100">Patient ID: {patient.patient_id}</p>
          </div>
        </div>
        <button
          onClick={() => setShowActivity(true)}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
        >
          <Clock className="h-4 w-4" />
          <span>Recent Activity</span>
        </button>
      </div>

      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8 overflow-x-auto">
          {tabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap flex items-center ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600 dark:text-blue-400' 
                    : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600' 
                }`}
              >
                <Icon className="h-4 w-4 mr-2" /> 
                <span>{tab.label}</span>
                {tab.count !== undefined && tab.count > 0 && (
                  <span className="ml-1.5 bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 text-xs font-medium px-2 py-0.5 rounded-full">
                    {tab.count}
                  </span>
                )}
              </button>
            );
          })}
        </nav>
      </div>

      <div className="mt-6">
        {renderTabContent()}
      </div>
      
      {/* Recent Activity Modal */}
      {showActivity && (
        <RecentActivity
          patientId={id!}
          patientName={`${patient.first_name} ${patient.last_name}`}
          onClose={() => setShowActivity(false)}
        />
      )}
    </div>
  );
};