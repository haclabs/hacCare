import React, { useState, useEffect } from 'react';
import { 
  Users, Plus, Edit, Trash2, Search, Filter, Eye, 
  Calendar, MapPin, Heart, AlertTriangle, User, Phone, Mail 
} from 'lucide-react';
import { format } from 'date-fns';
import { Patient } from '../../types';
import { usePatients } from '../../contexts/PatientContext';
import { PatientForm } from './PatientForm';
import { PatientDetail } from './PatientDetail';

/**
 * Patient Management Component
 * 
 * Comprehensive patient management interface for super administrators.
 * Provides full CRUD operations for patient records with advanced search
 * and filtering capabilities.
 * 
 * Features:
 * - Patient list with search and filtering
 * - Create, edit, and delete patient records
 * - Patient detail view
 * - Bulk operations
 * - Export functionality
 * - Advanced filtering by condition, department, etc.
 * 
 * @returns {JSX.Element} The patient management component
 */
export const PatientManagement: React.FC = () => {
  // Get patient data and functions from context
  const { patients, addPatient, updatePatient, deletePatient } = usePatients();
  
  // State management
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);
  const [showForm, setShowForm] = useState(false);
  const [showDetail, setShowDetail] = useState(false);
  const [filterCondition, setFilterCondition] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'name' | 'room' | 'admission' | 'condition'>('name');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');

  /**
   * Filter and search patients based on current criteria
   */
  const filteredPatients = patients.filter(patient => {
    // Search filter
    const matchesSearch = 
      patient.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      patient.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      patient.patientId.toLowerCase().includes(searchTerm.toLowerCase()) ||
      patient.roomNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
      patient.diagnosis.toLowerCase().includes(searchTerm.toLowerCase());

    // Condition filter
    const matchesCondition = filterCondition === 'all' || patient.condition === filterCondition;

    return matchesSearch && matchesCondition;
  }).sort((a, b) => {
    // Sorting logic
    let aValue: string | number;
    let bValue: string | number;

    switch (sortBy) {
      case 'name':
        aValue = `${a.lastName}, ${a.firstName}`;
        bValue = `${b.lastName}, ${b.firstName}`;
        break;
      case 'room':
        aValue = `${a.roomNumber}${a.bedNumber}`;
        bValue = `${b.roomNumber}${b.bedNumber}`;
        break;
      case 'admission':
        aValue = new Date(a.admissionDate).getTime();
        bValue = new Date(b.admissionDate).getTime();
        break;
      case 'condition':
        aValue = a.condition;
        bValue = b.condition;
        break;
      default:
        aValue = a.patientId;
        bValue = b.patientId;
    }

    if (sortOrder === 'asc') {
      return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
    } else {
      return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
    }
  });

  /**
   * Handle patient deletion
   * @param {string} patientId - ID of patient to delete
   */
  const handleDeletePatient = async (patientId: string) => {
    if (!confirm('Are you sure you want to delete this patient? This action cannot be undone.')) {
      return;
    }

    try {
      setLoading(true);
      deletePatient(patientId);
      
      // Close detail view if deleted patient was selected
      if (selectedPatient?.id === patientId) {
        setSelectedPatient(null);
        setShowDetail(false);
      }
    } catch (error) {
      console.error('Error deleting patient:', error);
      alert('Failed to delete patient. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  /**
   * Handle patient form submission (create/update)
   * @param {Patient} patientData - Patient data to save
   */
  const handleSavePatient = async (patientData: Patient) => {
    try {
      setLoading(true);
      
      if (selectedPatient) {
        // Update existing patient
        updatePatient({ ...patientData, id: selectedPatient.id });
      } else {
        // Create new patient
        const newPatient = {
          ...patientData,
          id: `patient-${Date.now()}`, // In real app, this would be generated by the backend
        };
        addPatient(newPatient);
      }

      setShowForm(false);
      setSelectedPatient(null);
    } catch (error) {
      console.error('Error saving patient:', error);
      alert('Failed to save patient. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  /**
   * Get condition color styling
   * @param {string} condition - Patient condition
   * @returns {string} CSS classes for condition styling
   */
  const getConditionColor = (condition: Patient['condition']) => {
    switch (condition) {
      case 'Critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'Stable': return 'bg-green-100 text-green-800 border-green-200';
      case 'Improving': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'Discharged': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  /**
   * Calculate patient age
   * @param {string} dateOfBirth - Patient's date of birth
   * @returns {number} Age in years
   */
  const calculateAge = (dateOfBirth: string) => {
    const today = new Date();
    const birthDate = new Date(dateOfBirth);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    
    return age;
  };

  // Show patient detail view
  if (showDetail && selectedPatient) {
    return (
      <PatientDetail
        patient={selectedPatient}
        onBack={() => {
          setShowDetail(false);
          setSelectedPatient(null);
        }}
      />
    );
  }

  return (
    <div className="space-y-6">
      {/* Header Section */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <Users className="h-8 w-8 text-blue-600" />
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Patient Management</h1>
            <p className="text-sm text-gray-600">Manage all patient records and information</p>
          </div>
        </div>
        <button
          onClick={() => {
            setSelectedPatient(null);
            setShowForm(true);
          }}
          disabled={loading}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2 disabled:opacity-50"
        >
          <Plus className="h-4 w-4" />
          <span>Add Patient</span>
        </button>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Patients</p>
              <p className="text-3xl font-bold text-gray-900">{patients.length}</p>
            </div>
            <div className="p-3 rounded-full bg-blue-100">
              <Users className="h-6 w-6 text-blue-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Critical Patients</p>
              <p className="text-3xl font-bold text-red-600">
                {patients.filter(p => p.condition === 'Critical').length}
              </p>
            </div>
            <div className="p-3 rounded-full bg-red-100">
              <AlertTriangle className="h-6 w-6 text-red-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Stable Patients</p>
              <p className="text-3xl font-bold text-green-600">
                {patients.filter(p => p.condition === 'Stable').length}
              </p>
            </div>
            <div className="p-3 rounded-full bg-green-100">
              <Heart className="h-6 w-6 text-green-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Admissions Today</p>
              <p className="text-3xl font-bold text-blue-600">
                {patients.filter(p => {
                  const today = new Date().toDateString();
                  const admissionDate = new Date(p.admissionDate).toDateString();
                  return today === admissionDate;
                }).length}
              </p>
            </div>
            <div className="p-3 rounded-full bg-blue-100">
              <Calendar className="h-6 w-6 text-blue-600" />
            </div>
          </div>
        </div>
      </div>

      {/* Search and Filter Section */}
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {/* Search */}
          <div className="md:col-span-2">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
              <input
                type="text"
                placeholder="Search patients by name, ID, room, or diagnosis..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          {/* Condition Filter */}
          <div>
            <select
              value={filterCondition}
              onChange={(e) => setFilterCondition(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="all">All Conditions</option>
              <option value="Critical">Critical</option>
              <option value="Stable">Stable</option>
              <option value="Improving">Improving</option>
              <option value="Discharged">Discharged</option>
            </select>
          </div>

          {/* Sort Options */}
          <div>
            <select
              value={`${sortBy}-${sortOrder}`}
              onChange={(e) => {
                const [field, order] = e.target.value.split('-');
                setSortBy(field as any);
                setSortOrder(order as any);
              }}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="name-asc">Name (A-Z)</option>
              <option value="name-desc">Name (Z-A)</option>
              <option value="room-asc">Room (Low-High)</option>
              <option value="room-desc">Room (High-Low)</option>
              <option value="admission-desc">Newest First</option>
              <option value="admission-asc">Oldest First</option>
              <option value="condition-asc">Condition (A-Z)</option>
            </select>
          </div>
        </div>

        {/* Results Summary */}
        <div className="mt-4 flex items-center justify-between text-sm text-gray-600">
          <span>
            Showing {filteredPatients.length} of {patients.length} patients
          </span>
          {searchTerm && (
            <button
              onClick={() => setSearchTerm('')}
              className="text-blue-600 hover:text-blue-800"
            >
              Clear search
            </button>
          )}
        </div>
      </div>

      {/* Patient List */}
      <div className="bg-white rounded-lg border border-gray-200">
        {filteredPatients.length === 0 ? (
          <div className="text-center py-12">
            <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No patients found</h3>
            <p className="text-gray-600 mb-4">
              {searchTerm || filterCondition !== 'all' 
                ? 'Try adjusting your search or filter criteria'
                : 'Get started by adding your first patient'
              }
            </p>
            {!searchTerm && filterCondition === 'all' && (
              <button
                onClick={() => {
                  setSelectedPatient(null);
                  setShowForm(true);
                }}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                Add First Patient
              </button>
            )}
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Patient
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Room
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Condition
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Diagnosis
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Admission
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Nurse
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredPatients.map((patient) => (
                  <tr key={patient.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="bg-blue-100 p-2 rounded-full mr-3">
                          <User className="h-4 w-4 text-blue-600" />
                        </div>
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {patient.firstName} {patient.lastName}
                          </div>
                          <div className="text-sm text-gray-500">
                            {patient.patientId} • {calculateAge(patient.dateOfBirth)} years • {patient.gender}
                          </div>
                          {patient.allergies.length > 0 && (
                            <div className="flex items-center mt-1">
                              <AlertTriangle className="h-3 w-3 text-amber-500 mr-1" />
                              <span className="text-xs text-amber-600">
                                {patient.allergies.length} allergies
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center text-sm text-gray-900">
                        <MapPin className="h-4 w-4 text-gray-400 mr-1" />
                        {patient.roomNumber}{patient.bedNumber}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getConditionColor(patient.condition)}`}>
                        {patient.condition}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm text-gray-900 max-w-xs truncate" title={patient.diagnosis}>
                        {patient.diagnosis}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {format(new Date(patient.admissionDate), 'MMM dd, yyyy')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {patient.assignedNurse}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <button
                          onClick={() => {
                            setSelectedPatient(patient);
                            setShowDetail(true);
                          }}
                          className="text-blue-600 hover:text-blue-900 p-1 rounded"
                          title="View Details"
                        >
                          <Eye className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => {
                            setSelectedPatient(patient);
                            setShowForm(true);
                          }}
                          className="text-green-600 hover:text-green-900 p-1 rounded"
                          title="Edit Patient"
                        >
                          <Edit className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleDeletePatient(patient.id)}
                          className="text-red-600 hover:text-red-900 p-1 rounded"
                          title="Delete Patient"
                          disabled={loading}
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Patient Form Modal */}
      {showForm && (
        <PatientForm
          patient={selectedPatient}
          onClose={() => {
            setShowForm(false);
            setSelectedPatient(null);
          }}
          onSave={handleSavePatient}
        />
      )}
    </div>
  );
};